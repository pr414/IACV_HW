Printing Base m

clc; close all; clear all;

% Load necessary data
load("lines_homogeneous_l.mat"); % 3x3 (coords x lines l_i)
load("lines_homogeneous_m.mat"); % 3x6 (coords x lines m_j)
load("lines_homogeneous_h.mat"); % 3x4 (coords x lines h_i)
load("conics.mat");
load("curves.mat"); % 12 Points of Curve S
load("points_set_m.mat");
load("transformation_matrix.mat");

% Load the image
image = imread('Look-outCat.jpg');
[height, width, ~] = size(image);
tform_final = projective2d(T');
rectified_image = imwarp(image, tform_final);

% Extract the last 4 points from points_set_m
rect_points_original = points_set_m(:, end-3:end); % Get the last 4 points for lines m5 and m6

% Apply the rectifying homography T to the rectangle points
rect_points_rectified = T * rect_points_original; % Transform points
rect_points_rectified = rect_points_rectified ./ rect_points_rectified(3, :); % Normalize (homogeneous to Cartesian)

% Prepare the rectangle for plotting (corrected connections)
x_rect = [rect_points_rectified(1, 1), rect_points_rectified(1, 2), rect_points_rectified(1, 4), rect_points_rectified(1, 3), rect_points_rectified(1, 1)];
y_rect = [rect_points_rectified(2, 1), rect_points_rectified(2, 2), rect_points_rectified(2, 4), rect_points_rectified(2, 3), rect_points_rectified(2, 1)];

% Original rectangle points (for plotting)
x_orig = [rect_points_original(1, 1), rect_points_original(1, 2), rect_points_original(1, 4), rect_points_original(1, 3), rect_points_original(1, 1)];
y_orig = [rect_points_original(2, 1), rect_points_original(2, 2), rect_points_original(2, 4), rect_points_original(2, 3), rect_points_original(2, 1)];


% Pplot: Points interpreted in Euclidean space
figure;
scatter(x_rect, y_rect, 'bo', 'filled');
hold on;
% Plot the sides of the rectangle in Euclidean space
plot(x_rect, y_rect, 'g-', 'LineWidth', 2); % Green lines for rectangle sides
title('Points Interpreted in Euclidean Space');
axis equal;

% Compute distances
point1 = rect_points_rectified(:, 1); % Point 1
point2 = rect_points_rectified(:, 2); % Point 2
point3 = rect_points_rectified(:, 3); % Point 3

% Euclidean distances
distance_1_3 = norm(point3(1:2) - point1(1:2)); % 2D distance (known as 1 meter)
distance_1_2 = norm(point2(1:2) - point1(1:2)); % 2D distance (unknown side length)

% Scale distances
scale_factor = 1 / distance_1_3; % Since side 1-3 is 1 meter
scaled_distance_1_2 = distance_1_2 * scale_factor;

% Display result
disp(['The length of side 1-2 is: ', num2str(scaled_distance_1_2), ' meters']);

depth_m = scaled_distance_1_2;
save("depth.mat", "depth_m");