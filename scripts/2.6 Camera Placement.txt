2.6 Camera Placement
load("calibration_matrix.mat"); % Calibration matrix K
load("transformation_matrix.mat", "T"); % Transformation T for lower face mapping (m5, m6)

% Compute the inverse of K
K_inv = inv(K);

% Compute the matrix [r1, r2, o_pi]
pose_matrix = K_inv * T;

% Extract r1, r2, and o_pi
r1 = pose_matrix(:, 1);
r2 = pose_matrix(:, 2);
o_pi = pose_matrix(:, 3);

% Verify orthogonality of r1 and r2
dot_product = dot(r1, r2);
disp('Dot product of r1 and r2 (should be close to zero):');
disp(dot_product);

% Normalize r1 and r2 to ensure they're proper rotation axes
r1 = r1 / norm(r1);
r2 = r2 / norm(r2);

% Display the results
disp('r1:');
disp(r1);
disp('r2:');
disp(r2);
disp('o_pi:');
disp(o_pi);

% Extract the camera's orientation and position
camera_center = o_pi; % Camera origin in 3D space
r3 = cross(r1, r2); % Compute r3 for a valid right-handed coordinate system

% Plot the camera placement
figure;
hold on;

% Plot the world coordinate axes
quiver3(0, 0, 0, 1, 0, 0, 'r', 'LineWidth', 2); % X-axis
quiver3(0, 0, 0, 0, 1, 0, 'g', 'LineWidth', 2); % Y-axis
quiver3(0, 0, 0, 0, 0, 1, 'b', 'LineWidth', 2); % Z-axis

% Plot the camera's orientation
quiver3(camera_center(1), camera_center(2), camera_center(3), r1(1), r1(2), r1(3), 'r--', 'LineWidth', 2); % Camera X-axis
quiver3(camera_center(1), camera_center(2), camera_center(3), r2(1), r2(2), r2(3), 'g--', 'LineWidth', 2); % Camera Y-axis
quiver3(camera_center(1), camera_center(2), camera_center(3), r3(1), r3(2), r3(3), 'b--', 'LineWidth', 2); % Camera Z-axis

% Annotations
text(0, 0, 0, 'World Origin', 'HorizontalAlignment', 'left');
text(camera_center(1), camera_center(2), camera_center(3), 'Camera', 'HorizontalAlignment', 'left');

% Formatting
xlabel('X');
ylabel('Y');
zlabel('Z');
grid on;
axis equal;
view(3); % Set a 3D view angle
title('Camera Placement in 3D');
hold off;